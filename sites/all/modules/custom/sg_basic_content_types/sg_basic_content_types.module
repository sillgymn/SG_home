<?php

/**
 * @file
 * Code for the SG Basic content types feature.
 * 
 * 
 * 
 * 
 */

include_once 'sg_basic_content_types.features.inc';

function sg_basic_content_types_cron()
{
    $query = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'sg_ads')
        ->propertyCondition('promote', '1')
        ->fieldCondition('field_kuulutus_unpublish_date', 'value', time(), '<')
        ->execute();

    foreach ($entities['node'] as $file) {

        $node = node_load($file->nid);
        $node->promote = 0;
        node_save($node);

    }

}

function sg_basic_content_types_form_alter(&$form, &$form_state, $form_id)
{

    if ($form_id == 'sg_ads_node_form') {
        $form['actions']['submit']['#validate'][] = 'sg_basic_content_types_form_validate';
    }


}
function sg_basic_content_types_form_validate(&$form, &$form_state)
{

    $kuulutus_unpublish_date = $form_state['values']['field_kuulutus_unpublish_date']['und'][0]['value'];
    $is_published = $form['nid']['#value'];

    if ($is_published == null) {

        if (empty($kuulutus_unpublish_date)) {

        } else {
            if ($kuulutus_unpublish_date < time()) {

                form_set_error('field_kuulutus_unpublish_date', 'Past date cannot be set ');
            }

        }
    } else {

        $published_date = $form_state['node']->field_kuulutus_unpublish_date['und'][0]['value'];

        if ($kuulutus_unpublish_date == $published_date) {

        } elseif ($kuulutus_unpublish_date < time()) {  
            form_set_error('field_kuulutus_unpublish_date', 'Past date cannot be set ');
        }
    }


}
